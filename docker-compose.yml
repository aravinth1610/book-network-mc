version: "3.9"

services:

  # MariaDB for book services
  bookmariadb:
    image: mariadb
    container_name: bookmariadb
    restart: unless-stopped
    ports:
      - "3036:3306"
    environment:
      MARIADB_DATABASE: book_network
      MARIADB_USER: ptest
      MARIADB_PASSWORD: 12345678
      MARIADB_ROOT_PASSWORD: 12345
    volumes:
      - ./book-mariadb:/var/lib/mysql
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MariaDB for Keycloak
  keycloakmariadb:
    image: mariadb
    container_name: keycloakmariadb
    restart: unless-stopped
    environment:
      MARIADB_DATABASE: keycloak_kc
      MARIADB_USER: ptest
      MARIADB_PASSWORD: 12345678
      MARIADB_ROOT_PASSWORD: 12345
    volumes:
      - ./keycloak_kc:/var/lib/mysql
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:25.0.5
    container_name: keycloak
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      DB_VENDOR: mariadb
      DB_ADDR: keycloakmariadb
      DB_DATABASE: keycloak_kc
      DB_USER: ptest
      DB_PASSWORD: 12345678
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command: 
      - "start-dev"
      - "--import-realm" 
    volumes:
      - ./Keycloak-realm/realm/:/opt/keycloak/data/import
    # depends_on:
    #   keycloakmariadb:
    #     condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/realms/master"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - app_network

  # Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - app_network

  # Discovery server
  discovery-server:
    image: aravinth1610/book-network-registry:0.0.1
    container_name: discovery-server
    restart: unless-stopped
    ports: 
      - "9000:9000"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/actuator/health"]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      zipkin:
        condition: service_started
    networks:
      - app_network

  # API Gateway
  apigateway:
    image: aravinth1610/book_network_gateway:0.0.1
    container_name: apigateway
    restart: unless-stopped
    ports: 
      - "8181:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: TRACE
    depends_on:
      - discovery-server
      - keycloak
    #   discovery-server:
    #     condition: service_healthy
    #   keycloak:
    #     condition: service_healthy
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 10
    networks:
      - app_network

  # E-Security
  esecurity:
    image: aravinth1610/esecurity:0.0.1
    container_name: esecurity
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: docker
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: TRACE
      esecurity.realm: network
      esecurity.serverURI: http://keycloak:8080
    depends_on:
      - discovery-server
      - bookmariadb
      - apigateway
    # depends_on:
    #   discovery-server:
    #     condition: service_healthy
    #   keycloak:
    #     condition: service_healthy
    #   bookmariadb:
    #     condition: service_healthy
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 10
    networks:
      - app_network

  # # Book service
  # book-network:
  #   image: aravinth1610/book-network:0.0.1
  #   container_name: book-network
  #   restart: unless-stopped
  #   environment:
  #     SPRING_PROFILES_ACTIVE: docker
  #   depends_on:
  #     - discovery-server
  #     - bookmariadb
  #     - apigateway
  #     - esecurity
  #   #   discovery-server:
  #   #     condition: service_healthy
  #   #   bookmariadb:
  #   #     condition: service_healthy
  #   #   api-gateway:
  #   #     condition: service_healthy
  #   #   esecurity:
  #   #     condition: service_healthy
  #   networks:
  #     - app_network

  # # Book inventory service
  # book-inventory:
  #   image: aravinth1610/book-inventory:0.0.1
  #   container_name: book-inventory
  #   restart: unless-stopped
  #   environment:
  #     SPRING_PROFILES_ACTIVE: docker
  #   depends_on:
  #     - discovery-server
  #     - bookmariadb
  #     - apigateway
  #     - esecurity
  #   # depends_on:
  #   #   discovery-server:
  #   #     condition: service_healthy
  #   #   bookmariadb:
  #   #     condition: service_healthy
  #   #   api-gateway:
  #   #     condition: service_healthy
  #   #   esecurity:
  #   #     condition: service_healthy
  #   networks:
  #     - app_network

  # Prometheus
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9181:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    # depends_on:
    # -  discovery-server
    networks:
      - app_network

  # Tempo Service
  # tempo:
  #   image: grafana/tempo
  #   container_name: tempo
  #   restart: unless-stopped
  #   command: "-config.file=/etc/tempo.yaml"
  #   volumes:
  #     - ./docker/tempo/tempo.yml:/etc/tempo.yaml:ro
  #     - ./docker/tempo/tempo-data:/tmp/tempo
  #   ports:
  #     - "3200:3200"
  #     - "9411:9411"
  #   networks:
  #     - app_network

  # Loki
  loki:
    image: grafana/loki:main
    container_name: loki
    restart: unless-stopped
    command: ["-config.file=/etc/loki/local-config.yaml"]
    ports:
      - "3100:3100"
    volumes:
      - ./docker/loki/local-config.yaml:/etc/loki/local-config.yaml  
    networks:
      - app_network

  # Grafana
  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./docker/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: password
    networks:
      - app_network

networks:
  app_network:
    driver: bridge
